plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.4+"
    id "com.github.breadmoirai.github-release" version "2.4.1"
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/' }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Dependencies
    implementation include("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}")
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation "maven.modrinth:spell-power:${project.spell_power_version}"
    modImplementation("maven.modrinth:ranged-weapon-api:${project.ranged_weapon_api_version}")
//    modImplementation(files("run/mods/dev/spell_power-${project.spell_power_version}.jar"))
//    modImplementation(files("run/mods/dev/ranged_weapon_api-${project.ranged_weapon_api_version}.jar"))

    modImplementation "dev.emi:trinkets:${project.trinkets_version}"
    include(modImplementation("maven.modrinth:structure-pool-api:${project.structure_pool_api_version}"))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "fabric_loader_version", project.fabric_loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand(project.properties)
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name // `fabric` suffix

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}"}
    }
}

ext.changelog_last_section = { ->
    return new File("CHANGELOG.md").text.split('\n# ')[0]
}

if(project.hasProperty('release_type')) {
    tasks.register("publishMod") {
        dependsOn(build)
        finalizedBy(tasks.curseforge)
        finalizedBy(tasks.modrinth)
        finalizedBy(tasks.githubRelease)
    }

    curseforge {
        apiKey = System.getenv("CURSEFORGE_API_KEY")
        project {
            id = System.getenv("CURSEFORGE_PROJECT_ID")
            changelog = changelog_last_section()
            changelogType = 'markdown'
            releaseType = release_type
            addGameVersion "${project.minecraft_version}"
            addGameVersion "Fabric"

            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'trinkets'
                requiredDependency 'spell-power'
                requiredDependency 'ranged-weapon-api'
                requiredDependency 'structure-pool-api'
            }

            mainArtifact(remapJar)
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
            options {
                forgeGradleIntegration = false
            }
        }
    }

    modrinth {
        token = System.getenv("MODRINTH_API_KEY")
        projectId = System.getenv("MODRINTH_PROJECT_ID") // This can be the project ID or the slug. Either will work!
        versionNumber = "${version}" // You don't need to set this manually. Will fail if Modrinth has this version already
        versionType = release_type // This is the default -- can also be `beta` or `alpha`
        uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
        gameVersions = ["${project.minecraft_version}"] // Must be an array, even with only one version
        loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
        changelog = changelog_last_section()
        dependencies { // A special DSL for creating dependencies
            // scope.type
            // The scope can be `required`, `optional`, `incompatible`, or `embedded`
            // The type can either be `project` or `version`
            required.project "fabric-api"
            required.project "trinkets"
            required.project "spell-power"
            required.project "ranged-weapon-api"
            required.project 'structure-pool-api'
        }
    }

    githubRelease {
        token System.getenv("GH_API_KEY") // This is your personal access token with Repo permissions
        owner System.getenv("GH_OWNER") // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
        repo System.getenv("GH_REPO") // by default this is set to your project name
        tagName "${version}" // by default this is set to "v${project.version}"
        targetCommitish System.getenv("GH_BRANCH") // by default this is set to "main"
        releaseName "Release" // Release title, by default this is the same as the tagName
        generateReleaseNotes false // Generate release notes automatically, if true and body is present, body will be pre-pended, if name is not given, one will be generated by the tag
        // body.set "" // by default this is empty
        draft false // by default this is true
        prerelease release_type != "release" // by default this is false
        // releaseAssets jar.destinationDir.listFiles // this points to which files you want to upload as assets with your release, by default this is empty
        allowUploadToExisting false // Setting this to true will allow this plugin to upload artifacts to a release if it found an existing one. If overwrite is set to true, this option is ignored.
        overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
        // dryRun true // by default false; you can use this to see what actions would be taken without making a release
        apiEndpoint "https://api.github.com" // should only change for github enterprise users
        client // This is the okhttp client used for http requests
    }
}
